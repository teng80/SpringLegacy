/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-06-05 09:04:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadJquery_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("	<style>\r\n");
      out.write("		.uploadResult {\r\n");
      out.write("			width: 100%;\r\n");
      out.write("			background-color: gray;\r\n");
      out.write("		}\r\n");
      out.write("		.uploadResult ul {\r\n");
      out.write("			display: flex;\r\n");
      out.write("			flex-flow: row;\r\n");
      out.write("			justify-content: center;\r\n");
      out.write("			align-items: center;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.uploadResult ul li {\r\n");
      out.write("			list-style: none;\r\n");
      out.write("			padding: 10px;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.uploadResult ul li img {\r\n");
      out.write("			width: 20px;\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("// 			확장자가 exe|sh|js 업로드 금지하기 위한 정규식\r\n");
      out.write("			var regex = new RegExp(\"(.*?)\\.(exe|sh|js)$\");\r\n");
      out.write("			var maxSize = 5242880;//5MB\r\n");
      out.write("			\r\n");
      out.write("			function checkExtension(fileName, fileSize) {\r\n");
      out.write("				if (fileSize > maxSize) {\r\n");
      out.write("					alert(\"파일 사이즈 초과\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				if(regex.test(fileName)){\r\n");
      out.write("					alert(\"해당 종류의 파일은 업로드할 수 없습니다.\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				return true;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			var cloneObj = $(\".uploadDiv\").clone();\r\n");
      out.write("			console.log(\"@# cloneObj ===>\"+cloneObj);\r\n");
      out.write("			\r\n");
      out.write("			$(\"#uploadBtn\").on(\"click\",function(){\r\n");
      out.write("				var formData = new FormData();\r\n");
      out.write("				\r\n");
      out.write("				var inputFile = $(\"input[name='uploadFile']\");\r\n");
      out.write("// 				files : 파일정보\r\n");
      out.write("				var files = inputFile[0].files;\r\n");
      out.write("				console.log(files);\r\n");
      out.write("				\r\n");
      out.write("				for (var i = 0; i < files.length; i++) {\r\n");
      out.write("// 					파일크기와 종류중에서 거짓이면 리턴\r\n");
      out.write("					if (!checkExtension(files[i].name, files[i].size)) {\r\n");
      out.write("						return;\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("// 					파일 정보를 formData에 추가\r\n");
      out.write("					formData.append(\"uploadFile\",files[i]);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				$.ajax({\r\n");
      out.write("// 					컨트롤러단 호출\r\n");
      out.write("// 					url:\"uploadAjaxAction\"\r\n");
      out.write("// 					result 로 파일 목록을 보내기 위해서 json 방식 사용\r\n");
      out.write("					url:\"uploadAjaxAction.json\"\r\n");
      out.write("// 					processData : 기본은 key/value 를 Query String 으로 전송하는게 true\r\n");
      out.write("// 					(파일 업로드는 false)\r\n");
      out.write("				   ,processData: false\r\n");
      out.write("// 				   contentType : 기본값 : \"application / x-www-form-urlencoded; charset = UTF-8\"\r\n");
      out.write("// 				   첨부파일은 false : multipart/form-data로 전송됨\r\n");
      out.write("				   ,contentType: false\r\n");
      out.write("				   ,data:formData\r\n");
      out.write("				   ,type:\"POST\"\r\n");
      out.write("				   ,success:function(result){\r\n");
      out.write("					   alert(\"Uploaded\");\r\n");
      out.write("					   console.log(result);\r\n");
      out.write("					   \r\n");
      out.write("// 					   파일정보들을 함수로 보냄\r\n");
      out.write("					   showUploadedFile(result);\r\n");
      out.write("					   \r\n");
      out.write("// 					   파일 업로드 전 초기상태로 설정\r\n");
      out.write("					   $(\".uploadDiv\").html(cloneObj.html());\r\n");
      out.write("				   }//end of success\r\n");
      out.write("				});//end of click ajax\r\n");
      out.write("			});//end of click function\r\n");
      out.write("			\r\n");
      out.write("			$(\".uploadResult\").on(\"click\",\"span\",function(){\r\n");
      out.write("				var targetFile = $(this).data(\"file\");\r\n");
      out.write("				var type = $(this).data(\"type\");\r\n");
      out.write("				var uploadResultItem = $(this).closest(\"li\");\r\n");
      out.write("				console.log(\"@# targetFile ===>\"+targetFile);\r\n");
      out.write("				console.log(\"@# uploadResultItem ===>\"+uploadResultItem);\r\n");
      out.write("				\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url:\"deleteFile\"\r\n");
      out.write("				   ,data:{fileName: targetFile, type: type}\r\n");
      out.write("				   ,dataType:\"text\"\r\n");
      out.write("				   ,type:\"POST\"\r\n");
      out.write("				   ,success: function(result) {\r\n");
      out.write("					   alert(result);\r\n");
      out.write("					 //브라우저에서 해당 썸네일이나 첨부파일이미지 제거\r\n");
      out.write("					   uploadResultItem.remove();\r\n");
      out.write("					}//end of success\r\n");
      out.write("				});//end of $.ajax\r\n");
      out.write("// 				uploadResultItem.remove();\r\n");
      out.write("				\r\n");
      out.write("			});//end of span function\r\n");
      out.write("			\r\n");
      out.write("			var uploadResult = $(\".uploadResult ul\");\r\n");
      out.write("			\r\n");
      out.write("// 			업로드 파일 목록 처리\r\n");
      out.write("			function showUploadedFile(uploadResultArr) {\r\n");
      out.write("				console.log(\"@# uploadResultArr\"+uploadResultArr);\r\n");
      out.write("				var str=\"\";\r\n");
      out.write("				\r\n");
      out.write("// 				업로드 파일 갯수만큼 반복\r\n");
      out.write("				$(uploadResultArr).each(function(i,obj) {\r\n");
      out.write("// 					이미지파일이 아닌 경우\r\n");
      out.write("					if(!obj.image){\r\n");
      out.write("						var fileCallPath = encodeURIComponent(obj.uploadPath+\"/\"+obj.uuid+\"_\"+obj.fileName);\r\n");
      out.write("						\r\n");
      out.write("// 						str += \"<li><img src='./resources/img/attach.png'>\"+obj.fileName+\"</li>\";\r\n");
      out.write("// 						str += \"<li><a href='./download?fileName=\"+fileCallPath+\"'>\"\r\n");
      out.write("// 								+\"<img src='./resources/img/attach.png'>\"+obj.fileName+\"</a></li>\";\r\n");
      out.write("						str += \"<li><div><a href='./download?fileName=\"+fileCallPath+\"'>\"\r\n");
      out.write("								+\"<img src='./resources/img/attach.png'>\"+obj.fileName+\"</a>\"\r\n");
      out.write("								+\"<span data-file=\\'\"+fileCallPath+\"\\' data-type='file'>x</span>\"\r\n");
      out.write("								+\"</div></li>\";\r\n");
      out.write("					}else {\r\n");
      out.write("// 						썸네일파일 경로+이름\r\n");
      out.write("						var fileCallPath = encodeURIComponent(obj.uploadPath+\"/s_\"+obj.uuid+\"_\"+obj.fileName);\r\n");
      out.write("						var originPath = obj.uploadPath+\"\\\\\"+obj.uuid+\"_\"+obj.fileName;\r\n");
      out.write("// 						백슬래시 -> 슬래시로 변경\r\n");
      out.write("						originPath = originPath.replace(new RegExp(/\\\\/g),\"/\");\r\n");
      out.write("						console.log(\"@# originPath ===>\"+originPath);\r\n");
      out.write("						\r\n");
      out.write("	// 					obj.fileName : 업로드파일 이름\r\n");
      out.write("// 						str += \"<li>\"+obj.fileName+\"</li>\";\r\n");
      out.write("// 						썸네일파일 경로 추가\r\n");
      out.write("// 						str += \"<li><img src='./display?fileName=\"+fileCallPath+\"'></li>\";\r\n");
      out.write("// 						str += \"<li><a href='javascript:showImage(\\'\"+originPath+\"\\')\\'><img src='./display?fileName=\"+fileCallPath+\"'></a></li>\";\r\n");
      out.write("// 						str += \"<li><a href=\\\"javascript:showImage(\\'\"+originPath+\"\\')\\\"><img src='./display?fileName=\"+fileCallPath+\"'></a></li>\";\r\n");
      out.write("						str += \"<li><a href=\\\"javascript:showImage(\\'\"+originPath+\"\\')\\\"><img src='./display?fileName=\"\r\n");
      out.write("								+fileCallPath+\"'></a>\"\r\n");
      out.write("								+\"<span data-file=\\'\"+fileCallPath+\"\\' data-type='image'>x</span>\"\r\n");
      out.write("								+\"</li>\";\r\n");
      out.write("					}\r\n");
      out.write("				});//end of each function\r\n");
      out.write("// 				div class 에 파일 목록 추가\r\n");
      out.write("				uploadResult.append(str);\r\n");
      out.write("			}//end of showUploadedFile\r\n");
      out.write("			\r\n");
      out.write("			$(\".bigPictureWrapper\").on(\"click\",function(e){\r\n");
      out.write("				setTimeout(function (){\r\n");
      out.write("					$(\".bigPictureWrapper\").hide();\r\n");
      out.write("				}, 1000 );\r\n");
      out.write("			});//end of .bigPictureWrapper \"click\"\r\n");
      out.write("		});//end of ready function\r\n");
      out.write("		\r\n");
      out.write("		function showImage(fileCallPath) {\r\n");
      out.write("// 			alert(fileCallPath);\r\n");
      out.write("			$(\".bigPictureWrapper\").css(\"display\",\"flex\").show();\r\n");
      out.write("			\r\n");
      out.write("// 			display?fileName=\"+encodeURI(fileCallPath) : 이미지파일을 화면에 출력\r\n");
      out.write("			$(\".bigPicture\").html(\"<img src='./display?fileName=\"+encodeURI(fileCallPath)+\"'>\")\r\n");
      out.write("							.animate({width:\"100%\",height:\"100%\"},1000);\r\n");
      out.write("// 			크롬 버전 114.0.5735.91(공식 빌드) (64비트) 이상일때 애니메이션 오작동\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>Upload with Jquery</h1>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"bigPictureWrapper\">\r\n");
      out.write("		<div class=\"bigPicture\">\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"uploadDiv\">\r\n");
      out.write("		<input type=\"file\" name=\"uploadFile\" multiple>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"uploadResult\">\r\n");
      out.write("		<ul>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<button id=\"uploadBtn\">Upload</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
